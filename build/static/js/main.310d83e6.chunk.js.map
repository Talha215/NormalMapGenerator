{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","Canvas","useRef","cv","window","img","Image","Vector","x","y","z","this","prototype","Normalize","length","Math","sqrt","react_default","a","createElement","className","ref","width","height","id","type","accept","onChange","event","canvas","current","ctx","getContext","target","files","src","URL","createObjectURL","onload","imread","dstx","Mat","dsty","cvtColor","COLOR_RGB2GRAY","Sobel","CV_8U","BORDER_DEFAULT","imshow","imgData","getImageData","sobelX","data","slice","sobelY","i","dX","dY","vector","putImageData","delete","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.310d83e6.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport './App.css';\n\n\nfunction App() {\n\n  const Canvas = useRef()\n  let cv = window.cv\n  const img = new Image\n\n  let Vector = function(x, y, z){\n    this.x = x\n    this.y = y\n    this.z = z\n  }\n\n  Vector.prototype.Normalize = function(){\n    let length = Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z)\n    this.x = this.x/length;\n    this.y = this.y/length;\n    this.z = this.z/length;\n  }\n\n     \n\n\n  const onImgLoad = (event) =>{\n\n    const canvas = Canvas.current\n    const ctx = canvas.getContext(\"2d\")\n\n    if(event.target.files && event.target.files[0]){\n      img.src = URL.createObjectURL(event.target.files[0])\n    }\n\n    img.onload = function(){\n      // ctx.drawImage(img, 0, 0, 500, 500)\n      let src = cv.imread(img);\n      let dstx = new cv.Mat();\n      let dsty = new cv.Mat();\n\n      //grayscale\n      cv.cvtColor(src, src, cv.COLOR_RGB2GRAY, 0);\n\n      //Steps: Compute Sobel In X, Compute Sobel in Y\n      // R = Sobel X\n      // G = Sobel Y\n      // B = 1.0/strength\n      \n      // //X SOBEL\n      cv.Sobel(src, dstx, cv.CV_8U, 1, 0, 3, 1, 0, cv.BORDER_DEFAULT);\n      cv.imshow(canvas, dstx) //show img on canvas so we can access it\n      let imgData = ctx.getImageData(0, 0, img.width, img.height);\n      let sobelX = imgData.data.slice();\n\n      // //Y SOBEL\n      cv.Sobel(src, dsty, cv.CV_8U, 0, 1, 3, 1, 0, cv.BORDER_DEFAULT);\n      cv.imshow(canvas, dsty) //show img on canvas so we can access it\n\n      imgData = ctx.getImageData(0, 0, img.width, img.height);\n      let sobelY = imgData.data.slice();\n\n      let intensity = 0.1;\n      imgData = ctx.getImageData(0, 0, img.width, img.height);\n\n      for(let i = 0; i < imgData.data.length; i += 4) {\n      \n        let dX = sobelX[i]\n        let dY = sobelY[i]\n        let dZ = 1.0/intensity\n\n        let vector = new Vector(dX, dY, dZ)\n        vector.Normalize()\n\n        imgData.data[i] = (vector.x * 0.5 + 0.5) * 255;\n        imgData.data[i + 1] = (vector.y * 0.5 + 0.5) * 255;\n        imgData.data[i + 2] = (vector.z * 0.5 + 0.5) * 255;\n        imgData.data[i + 3] = 255;\n\n        // dst[dstOff] = (dX/l * 0.5 + 0.5) * 255.0; \t// red\n\t\t\t\t// dst[dstOff+1] = (dY/l * 0.5 + 0.5) * 255.0; \t// green\n\t\t\t\t// dst[dstOff+2] = dZ/l * 255.0; \t\t\t\n\n      }\n\n\n\n\n      ctx.putImageData(imgData, 0, 0, 0, 0, img.width, img.height)\n\n      src.delete(); dstx.delete(); dsty.delete();\n    }\n\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <canvas ref={Canvas} width=\"500\" height=\"500\"></canvas>\n          <input id=\"upload-button\" type=\"file\" accept=\"image/*\" onChange={onImgLoad}/>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}